# -*- coding: utf-8 -*-
"""Rotten_Vs_Fresh__ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GGm_oQKvl5ccskdUyvVvQBHXkkGSNecx
"""

from google.colab import drive

drive.mount('/content/gdrive')

# Commented out IPython magic to ensure Python compatibility.
import sklearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline
import tensorflow as tf
import keras
import glob
import cv2
import os
print(os.listdir("/content/drive/MyDrive/Rotten VS Fresh/train"))

from google.colab import drive
drive.mount('/content/drive')

fruit_images = []
labels = []
for fruit_dir_path in glob.glob("/content/gdrive/MyDrive/train/*"):
    fruit_label = fruit_dir_path.split("/")[-1]
    for image_path in glob.glob(os.path.join(fruit_dir_path, "*.png")):
        image = cv2.imread(image_path, cv2.IMREAD_COLOR)
        image = cv2.resize(image, (110, 110))
        image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        fruit_images.append(image)
        labels.append(fruit_label)
fruit_images = np.array(fruit_images)
fruit_images = fruit_images.reshape(len(fruit_images),-1)
labels = np.array(labels)

print(np.shape(fruit_images))

import matplotlib.pyplot as plt
validation_fruit_images = []
validation_labels = []
for fruit_dir_path in glob.glob("/content/gdrive/MyDrive/test/*"):
    fruit_label = fruit_dir_path.split("/")[-1]
    for image_path in glob.glob(os.path.join(fruit_dir_path, "*.png")):
        image = cv2.imread(image_path, cv2.IMREAD_COLOR)
        image = cv2.resize(image, (110, 110))
        image = cv2.cvtColor(image, cv2.COLOR_RGB2GRAY)
        #image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        validation_fruit_images.append(image)
        validation_labels.append(fruit_label)
validation_fruit_images = np.array(validation_fruit_images)
plt.imshow(cv2.cvtColor(validation_fruit_images[1], cv2.COLOR_GRAY2RGB))
plt.show()
#cv2.imshow(validation_fruit_images[1])
validation_fruit_images = validation_fruit_images.reshape(len(validation_fruit_images),-1)
validation_labels = np.array(validation_labels)

print(np.shape(validation_fruit_images))

print(np.shape(validation_fruit_images))

"""###**Decision Tree classifier**"""

from sklearn.tree import DecisionTreeClassifier
clf_tree=DecisionTreeClassifier(criterion='entropy',max_depth=3, random_state=17)
clf_tree.fit(fruit_images, labels)

count=0
total = np.shape(validation_fruit_images)[0]
#print(total)
for i in range(total):
    check=clf_tree.predict([validation_fruit_images[i]])
    if check[0] == validation_labels[i] :
        count += 1
print(count)
print("Accuracy is ", count/total)

print(validation_fruit_images[9])
print(validation_labels[9])
print(fruit_images[9])
print(labels[9])
for i in range(1,298,30):
    check=clf_tree.predict([fruit_images[i]])
    print(check,"correct label", labels[i])

from sklearn.metrics import accuracy_score
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
predict_train=clf_tree.predict(fruit_images)
print('Target on train data',predict_train)
accuracy_train=accuracy_score(labels, predict_train)
print('accuracy_score on train dataset:', accuracy_train)
predict_test=clf_tree.predict(validation_fruit_images)
score_tree = round(accuracy_score(validation_labels,predict_test)*100,2)

print("The accuracy score achieved using Decision Tree is: "+str(score_tree)+" %")
cm=confusion_matrix(validation_labels,predict_test)
print(cm)
sns.heatmap(confusion_matrix(validation_labels,predict_test),annot=True)
print(classification_report(validation_labels,predict_test))

"""###**Navie Bayes classifier**"""

from sklearn.naive_bayes import GaussianNB
clf_gb=GaussianNB()
clf_gb.fit(fruit_images, labels)

count=0
total = np.shape(validation_fruit_images)[0]
#print(total)
for i in range(total):
    check=clf_gb.predict([validation_fruit_images[i]])
    if check[0] == validation_labels[i] :
        count += 1
print(count)
print("Accuracy is ", count/total)

print(validation_fruit_images[9])
print(validation_labels[9])
print(fruit_images[9])
print(labels[9])
for i in range(1,298,30):
    check=clf_gb.predict([fruit_images[i]])
    print(check,"correct label", labels[i])

from sklearn.metrics import accuracy_score
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
predict_train=clf_gb.predict(fruit_images)
print('Target on train data',predict_train)
accuracy_train=accuracy_score(labels, predict_train)
print('accuracy_score on train dataset:', accuracy_train)
predict_test=clf_gb.predict(validation_fruit_images)
score_gb = round(accuracy_score(validation_labels,predict_test)*100,2)

print("The accuracy score achieved using Navie bayes is: "+str(score_gb)+" %")
cm=confusion_matrix(validation_labels,predict_test)
print(cm)
sns.heatmap(confusion_matrix(validation_labels,predict_test),annot=True)
print(classification_report(validation_labels,predict_test))

"""###**KNN classifier**"""

from sklearn.neighbors import KNeighborsClassifier

knn = KNeighborsClassifier(n_neighbors=6)
knn.fit(fruit_images, labels)

count=0
total = np.shape(validation_fruit_images)[0]
#print(total)
for i in range(total):
    check=knn.predict([validation_fruit_images[i]])
    if check[0] == validation_labels[i] :
        count += 1
print(count)
print("Accuracy is ", count/total)

print(validation_fruit_images[9])
print(validation_labels[9])
print(fruit_images[9])
print(labels[9])
for i in range(1,298,30):
    check=knn.predict([fruit_images[i]])
    print(check,"correct label", labels[i])

from sklearn.metrics import accuracy_score
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
predict_train=knn.predict(fruit_images)
print('Target on train data',predict_train)
accuracy_train=accuracy_score(labels, predict_train)
print('accuracy_score on train dataset:', accuracy_train)
predict_test=knn.predict(validation_fruit_images)
score_knn = round(accuracy_score(validation_labels,predict_test)*100,2)

print("The accuracy score achieved using KNN is: "+str(score_knn)+" %")
cm=confusion_matrix(validation_labels,predict_test)
print(cm)
sns.heatmap(confusion_matrix(validation_labels,predict_test),annot=True)
print(classification_report(validation_labels,predict_test))

"""###**SVM classifier**"""

from sklearn import svm
clf_svm = svm.SVC(decision_function_shape='ovo')
#clf_svm = svm.SVC()
clf_svm.fit(fruit_images, labels)

count=0
total = np.shape(validation_fruit_images)[0]
#print(total)
for i in range(total):
    check=clf_svm.predict([validation_fruit_images[i]])
    if check[0] == validation_labels[i] :
        count += 1
print(count)
print("Accuracy is ", count/total)

print(validation_fruit_images[9])
print(validation_labels[9])
print(fruit_images[9])
print(labels[9])
for i in range(1,298,30):
    check=clf_svm.predict([fruit_images[i]])
    print(check,"correct label", labels[i])

from sklearn.metrics import accuracy_score
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
predict_train=clf_svm.predict(fruit_images)
print('Target on train data',predict_train)
accuracy_train=accuracy_score(labels, predict_train)
print('accuracy_score on train dataset:', accuracy_train)
predict_test=clf_svm.predict(validation_fruit_images)
score_svm = round(accuracy_score(validation_labels,predict_test)*100,2)

print("The accuracy score achieved using Decision Tree is: "+str(score_svm)+" %")
cm=confusion_matrix(validation_labels,predict_test)
print(cm)
sns.heatmap(confusion_matrix(validation_labels,predict_test),annot=True)
print(classification_report(validation_labels,predict_test))

"""###**Random Forest Classifier**"""

from sklearn.ensemble import RandomForestClassifier
clf_rf=RandomForestClassifier(max_depth=10, random_state=0)
clf_rf.fit(fruit_images, labels)

count=0
total = np.shape(validation_fruit_images)[0]
#print(total)
for i in range(total):
    check=clf_rf.predict([validation_fruit_images[i]])
    if check[0] == validation_labels[i] :
        count += 1
print(count)
print("Accuracy is ", count/total)

print(validation_fruit_images[9])
print(validation_labels[9])
print(fruit_images[9])
print(labels[9])
for i in range(1,298,30):
    check=clf_rf.predict([fruit_images[i]])
    print(check,"correct label", labels[i])

from sklearn.metrics import accuracy_score
import seaborn as sns
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
predict_train=clf_rf.predict(fruit_images)
print('Target on train data',predict_train)
accuracy_train=accuracy_score(labels, predict_train)
print('accuracy_score on train dataset:', accuracy_train)
predict_test=clf_rf.predict(validation_fruit_images)
score_rf = round(accuracy_score(validation_labels,predict_test)*100,2)

print("The accuracy score achieved using Random Forest is: "+str(score_rf)+" %")
cm=confusion_matrix(validation_labels,predict_test)
print(cm)
sns.heatmap(confusion_matrix(validation_labels,predict_test),annot=True)
print(classification_report(validation_labels,predict_test))