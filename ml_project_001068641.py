# -*- coding: utf-8 -*-
"""ML_PROJECT_001068641.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/146iO0IcFz7EDWQxsFvJycoTSLBwyT2Dc
"""

import cv2
import numpy as np
import os
from tensorflow.keras.applications import VGG16, ResNet50, MobileNetV2, InceptionV3
from tensorflow.keras.applications.vgg16 import preprocess_input as vgg_preprocess_input
from tensorflow.keras.applications.resnet50 import preprocess_input as resnet_preprocess_input
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input as mobilenet_preprocess_input
from tensorflow.keras.applications.inception_v3 import preprocess_input as inception_preprocess_input
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

# Load and preprocess the RGB image
def load_rgb_image(file_path):
    image = cv2.imread(file_path)
    if image is None:
        raise ValueError(f"Failed to read the image: {file_path}")

    original_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    # Preprocess the RGB image (e.g., resize, normalization, etc.)
    if original_image.shape[0] != 299 or original_image.shape[1] != 299:
        preprocessed_image = cv2.resize(original_image, (299, 299))
    else:
        preprocessed_image = original_image
    return original_image, preprocessed_image

from google.colab import drive
drive.mount('/content/drive')

# Classify the flower using the CNN models
def classify_flower(model, rgb_image):
    # Preprocess the RGB image based on the model requirements
    if model == vgg_model:
        image = vgg_preprocess_input(rgb_image)
    elif model == resnet_model:
        image = resnet_preprocess_input(rgb_image)
    elif model == mobilenet_model:
        image = mobilenet_preprocess_input(rgb_image)
    elif model == inception_model:
        image = inception_preprocess_input(rgb_image)
    else:
        raise ValueError("Unsupported model.")

    image = np.expand_dims(image, axis=0)
    prediction = model.predict(image)
    # Process the prediction to get the flower maturing status
    return prediction

# Load and compile the pre-trained CNN models
vgg_model = VGG16(weights='imagenet')
resnet_model = ResNet50(weights='imagenet')
mobilenet_model = MobileNetV2(weights='imagenet')
inception_model = InceptionV3(weights='imagenet')
models = [vgg_model, resnet_model, mobilenet_model, inception_model]

# Directory containing your dataset of n images
dataset_directory = '/content/drive/MyDrive/Data/Data'

# Get a list of all image file names in the dataset directory
image_files = [file for file in os.listdir(dataset_directory) if file.lower().endswith(('.jpg', '.jpeg', '.png'))]

classifications = {}
for model in models:
    model_name = model.__class__.__name__
    predictions = []
    for image_file in image_files:
        image_path = os.path.join(dataset_directory, image_file)
        try:
            original_image, rgb_image = load_rgb_image(image_path)
            classification = classify_flower(model, rgb_image)
            predictions.append(classification)
        except Exception as e:
            print(f"Error processing {image_path}: {e}")
            continue
    classifications[model_name] = predictions

# Compare the classifications and choose the model with the highest average classification accuracy
best_model_name = ""
best_avg_accuracy = 0.0
for model_name, predictions in classifications.items():
    avg_accuracy = np.mean([pred[0][0] for pred in predictions])
    if avg_accuracy > best_avg_accuracy:
        best_model_name = model_name
        best_avg_accuracy = avg_accuracy

print(f"Best model: {best_model_name}")
print(f"Average classification accuracy: {best_avg_accuracy}")