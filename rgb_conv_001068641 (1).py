# -*- coding: utf-8 -*-
"""RGB_CONV_001068641.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xfZ5oyomXmBwJJLjwWYquptwg3ntU_22
"""

import os
import cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt  # Add this import statement
from google.colab import files

def apply_rgb_filter(image, r_factor, g_factor, b_factor):
    # Split the image into its RGB channels
    r_channel, g_channel, b_channel = cv2.split(image)

    # Apply the specified factors to each channel
    r_channel = cv2.multiply(r_channel, r_factor)
    g_channel = cv2.multiply(g_channel, g_factor)
    b_channel = cv2.multiply(b_channel, b_factor)

    # Merge the channels back to get the filtered image
    filtered_image = cv2.merge([r_channel, g_channel, b_channel])

    # Ensure pixel values are within the valid range [0, 255]
    filtered_image = np.clip(filtered_image, 0, 255)

    return filtered_image

dataset_folder = "/content/drive/MyDrive/Data/Data"
image_files = os.listdir(dataset_folder)

output_folder = "/content/filtered_images/"
os.makedirs(output_folder, exist_ok=True)
r_factor = 1.5
g_factor = 0.8
b_factor = 0.5

for image_file in image_files:
    if image_file.endswith(".jpg") or image_file.endswith(".jpeg") or image_file.endswith(".png"):
        image_path = os.path.join(dataset_folder, image_file)

        # Open the image using Pillow
        img = Image.open(image_path)

        # Convert the image to RGB format
        img_rgb = img.convert("RGB")

        # Convert the PIL image to an OpenCV image (numpy array)
        image_np = np.array(img_rgb)

        # Apply the RGB filter to the image
        filtered_image_np = apply_rgb_filter(image_np, r_factor, g_factor, b_factor)

        # Convert the filtered numpy array back to a PIL image
        filtered_image_pil = Image.fromarray(filtered_image_np)

        # Save the filtered image, overwriting the original file
        filtered_image_pil.save(image_path)

        print(f"{image_path} converted to RGB format and filtered.")

        # Display the original and converted images side by side
        fig, axes = plt.subplots(1, 2, figsize=(10, 5))
        axes[0].imshow(img)
        axes[0].set_title("Original Image")
        axes[0].axis('off')

        axes[1].imshow(filtered_image_pil)
        axes[1].set_title("Converted Image")
        axes[1].axis('off')

        plt.show()

        print(f"{image_path} converted to RGB format and filtered.")